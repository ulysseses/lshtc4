/* Generated by Cython 0.19.1 on Sat Feb 15 20:45:20 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (Py_TYPE(obj) == &PyBaseString_Type)
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER)
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__kNN__cppext__similarity
#define __PYX_HAVE_API__kNN__cppext__similarity
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <tr1/unordered_map>
#include <tr1/unordered_set>
#include "math.h"
#include <algorithm>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "similarity.pyx",
};

/*--- Type declarations ---*/

/* "kNN/cppext/similarity.pyx":12
 * from kNN.cppext.container cimport unordered_map, unordered_set
 * 
 * ctypedef unordered_map[int, int] iidict             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int, unordered_set[int]] isdict
 * ctypedef unordered_map[int, double] iddict
 */
typedef std::tr1::unordered_map<int,int> __pyx_t_3kNN_6cppext_10similarity_iidict;

/* "kNN/cppext/similarity.pyx":13
 * 
 * ctypedef unordered_map[int, int] iidict
 * ctypedef unordered_map[int, unordered_set[int]] isdict             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int, double] iddict
 * ctypedef unordered_map[int, double].iterator iddictitr
 */
typedef std::tr1::unordered_map<int,std::tr1::unordered_set<int> > __pyx_t_3kNN_6cppext_10similarity_isdict;

/* "kNN/cppext/similarity.pyx":14
 * ctypedef unordered_map[int, int] iidict
 * ctypedef unordered_map[int, unordered_set[int]] isdict
 * ctypedef unordered_map[int, double] iddict             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int, double].iterator iddictitr
 * ctypedef unordered_set[int] iset
 */
typedef std::tr1::unordered_map<int,double> __pyx_t_3kNN_6cppext_10similarity_iddict;

/* "kNN/cppext/similarity.pyx":15
 * ctypedef unordered_map[int, unordered_set[int]] isdict
 * ctypedef unordered_map[int, double] iddict
 * ctypedef unordered_map[int, double].iterator iddictitr             # <<<<<<<<<<<<<<
 * ctypedef unordered_set[int] iset
 * ctypedef unordered_set[int].iterator isetitr
 */
typedef std::tr1::unordered_map<int,double>::iterator __pyx_t_3kNN_6cppext_10similarity_iddictitr;

/* "kNN/cppext/similarity.pyx":16
 * ctypedef unordered_map[int, double] iddict
 * ctypedef unordered_map[int, double].iterator iddictitr
 * ctypedef unordered_set[int] iset             # <<<<<<<<<<<<<<
 * ctypedef unordered_set[int].iterator isetitr
 * ctypedef vector[unordered_map[int,double]] mapvect
 */
typedef std::tr1::unordered_set<int> __pyx_t_3kNN_6cppext_10similarity_iset;

/* "kNN/cppext/similarity.pyx":17
 * ctypedef unordered_map[int, double].iterator iddictitr
 * ctypedef unordered_set[int] iset
 * ctypedef unordered_set[int].iterator isetitr             # <<<<<<<<<<<<<<
 * ctypedef vector[unordered_map[int,double]] mapvect
 * ctypedef pair[int,double] idpair
 */
typedef std::tr1::unordered_set<int>::iterator __pyx_t_3kNN_6cppext_10similarity_isetitr;

/* "kNN/cppext/similarity.pyx":18
 * ctypedef unordered_set[int] iset
 * ctypedef unordered_set[int].iterator isetitr
 * ctypedef vector[unordered_map[int,double]] mapvect             # <<<<<<<<<<<<<<
 * ctypedef pair[int,double] idpair
 * ctypedef vector[vector[int]] vectvect
 */
typedef std::vector<std::tr1::unordered_map<int,double> > __pyx_t_3kNN_6cppext_10similarity_mapvect;

/* "kNN/cppext/similarity.pyx":19
 * ctypedef unordered_set[int].iterator isetitr
 * ctypedef vector[unordered_map[int,double]] mapvect
 * ctypedef pair[int,double] idpair             # <<<<<<<<<<<<<<
 * ctypedef vector[vector[int]] vectvect
 * ctypedef unordered_map[int, vector[double]] vectmap
 */
typedef std::pair<int,double> __pyx_t_3kNN_6cppext_10similarity_idpair;

/* "kNN/cppext/similarity.pyx":20
 * ctypedef vector[unordered_map[int,double]] mapvect
 * ctypedef pair[int,double] idpair
 * ctypedef vector[vector[int]] vectvect             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int, vector[double]] vectmap
 * ctypedef unordered_map[int, vector[double]].iterator vectmapitr
 */
typedef std::vector<std::vector<int> > __pyx_t_3kNN_6cppext_10similarity_vectvect;

/* "kNN/cppext/similarity.pyx":21
 * ctypedef pair[int,double] idpair
 * ctypedef vector[vector[int]] vectvect
 * ctypedef unordered_map[int, vector[double]] vectmap             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int, vector[double]].iterator vectmapitr
 * ctypedef unordered_map[int, unordered_set[int]] isetdict
 */
typedef std::tr1::unordered_map<int,std::vector<double> > __pyx_t_3kNN_6cppext_10similarity_vectmap;

/* "kNN/cppext/similarity.pyx":22
 * ctypedef vector[vector[int]] vectvect
 * ctypedef unordered_map[int, vector[double]] vectmap
 * ctypedef unordered_map[int, vector[double]].iterator vectmapitr             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int, unordered_set[int]] isetdict
 * ctypedef unordered_map[int, unordered_set[int]].iterator isetdictitr
 */
typedef std::tr1::unordered_map<int,std::vector<double> >::iterator __pyx_t_3kNN_6cppext_10similarity_vectmapitr;

/* "kNN/cppext/similarity.pyx":23
 * ctypedef unordered_map[int, vector[double]] vectmap
 * ctypedef unordered_map[int, vector[double]].iterator vectmapitr
 * ctypedef unordered_map[int, unordered_set[int]] isetdict             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int, unordered_set[int]].iterator isetdictitr
 * 
 */
typedef std::tr1::unordered_map<int,std::tr1::unordered_set<int> > __pyx_t_3kNN_6cppext_10similarity_isetdict;

/* "kNN/cppext/similarity.pyx":24
 * ctypedef unordered_map[int, vector[double]].iterator vectmapitr
 * ctypedef unordered_map[int, unordered_set[int]] isetdict
 * ctypedef unordered_map[int, unordered_set[int]].iterator isetdictitr             # <<<<<<<<<<<<<<
 * 
 * cdef void transform_tfidf(mapvect& corpus, iidict& bin_word_counter):
 */
typedef std::tr1::unordered_map<int,std::tr1::unordered_set<int> >::iterator __pyx_t_3kNN_6cppext_10similarity_isetdictitr;

/* "kNN/cppext/similarity.pyx":64
 *     return log(ansatz ** 0.5)
 * 
 * ctypedef bint (*compare)(idpair, idpair)             # <<<<<<<<<<<<<<
 * ctypedef vector[idpair].iterator pairvectitr
 * cdef extern from "<algorithm>" namespace "std":
 */
typedef int (*__pyx_t_3kNN_6cppext_10similarity_compare)(__pyx_t_3kNN_6cppext_10similarity_idpair, __pyx_t_3kNN_6cppext_10similarity_idpair);

/* "kNN/cppext/similarity.pyx":65
 * 
 * ctypedef bint (*compare)(idpair, idpair)
 * ctypedef vector[idpair].iterator pairvectitr             # <<<<<<<<<<<<<<
 * cdef extern from "<algorithm>" namespace "std":
 *     void partial_sort(pairvectitr&, pairvectitr&, pairvectitr&, compare&) nogil except +
 */
typedef std::vector<__pyx_t_3kNN_6cppext_10similarity_idpair>::iterator __pyx_t_3kNN_6cppext_10similarity_pairvectitr;

/* "kNN/cppext/similarity.pyx":286
 *     # return pair[vectmap, vectmap](scores, pscores)
 * 
 * ctypedef vector[double].iterator dvectitr             # <<<<<<<<<<<<<<
 * cdef extern from "<algorithm>" namespace "std":
 *     dvectitr max_element(dvectitr&, dvectitr&) nogil except +
 */
typedef std::vector<double>::iterator __pyx_t_3kNN_6cppext_10similarity_dvectitr;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig); /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'kNN.cppext.container' */

/* Module declarations from 'cython' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'kNN.cppext.similarity' */
static double __pyx_f_3kNN_6cppext_10similarity_norm(__pyx_t_3kNN_6cppext_10similarity_iddict &); /*proto*/
static CYTHON_INLINE int __pyx_f_3kNN_6cppext_10similarity_comp_func(__pyx_t_3kNN_6cppext_10similarity_idpair &, __pyx_t_3kNN_6cppext_10similarity_idpair &); /*proto*/
static double __pyx_f_3kNN_6cppext_10similarity_custom_max(__pyx_t_3kNN_6cppext_10similarity_iddict &); /*proto*/
static double __pyx_f_3kNN_6cppext_10similarity_csum(std::vector<double> &); /*proto*/
#define __Pyx_MODULE_NAME "kNN.cppext.similarity"
int __pyx_module_is_main_kNN__cppext__similarity = 0;

/* Implementation of 'kNN.cppext.similarity' */
static PyObject *__pyx_builtin_xrange;
static char __pyx_k__range[] = "range";
static char __pyx_k__xrange[] = "xrange";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__xrange;
static PyObject *__pyx_int_0;

/* "kNN/cppext/similarity.pyx":26
 * ctypedef unordered_map[int, unordered_set[int]].iterator isetdictitr
 * 
 * cdef void transform_tfidf(mapvect& corpus, iidict& bin_word_counter):             # <<<<<<<<<<<<<<
 *     ''' Transform corpus into modified tf-idf representation.
 *         t_X = transform_corpus(corpus, bin_word_counter)
 */

static void __pyx_f_3kNN_6cppext_10similarity_transform_tfidf(__pyx_t_3kNN_6cppext_10similarity_mapvect &__pyx_v_corpus, __pyx_t_3kNN_6cppext_10similarity_iidict &__pyx_v_bin_word_counter) {
  int __pyx_v_n;
  int __pyx_v_i;
  __pyx_t_3kNN_6cppext_10similarity_iddict __pyx_v_doc;
  __pyx_t_3kNN_6cppext_10similarity_iddictitr __pyx_v_it;
  __pyx_t_3kNN_6cppext_10similarity_idpair __pyx_v_kv;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform_tfidf", 0);

  /* "kNN/cppext/similarity.pyx":43
 *     cdef iddictitr it
 *     cdef idpair kv
 *     n = <int> corpus.size()             # <<<<<<<<<<<<<<
 *     for i in xrange(n):
 *         doc = corpus[i]
 */
  __pyx_v_n = ((int)__pyx_v_corpus.size());

  /* "kNN/cppext/similarity.pyx":44
 *     cdef idpair kv
 *     n = <int> corpus.size()
 *     for i in xrange(n):             # <<<<<<<<<<<<<<
 *         doc = corpus[i]
 *         it = doc.begin()
 */
  __pyx_t_1 = __pyx_v_n;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "kNN/cppext/similarity.pyx":45
 *     n = <int> corpus.size()
 *     for i in xrange(n):
 *         doc = corpus[i]             # <<<<<<<<<<<<<<
 *         it = doc.begin()
 *         while it != doc.end():
 */
    __pyx_v_doc = (__pyx_v_corpus[__pyx_v_i]);

    /* "kNN/cppext/similarity.pyx":46
 *     for i in xrange(n):
 *         doc = corpus[i]
 *         it = doc.begin()             # <<<<<<<<<<<<<<
 *         while it != doc.end():
 *             kv = deref(it)
 */
    __pyx_v_it = __pyx_v_doc.begin();

    /* "kNN/cppext/similarity.pyx":47
 *         doc = corpus[i]
 *         it = doc.begin()
 *         while it != doc.end():             # <<<<<<<<<<<<<<
 *             kv = deref(it)
 *             doc[kv.first] = log(kv.second + 1) * log(<double>n / \
 */
    while (1) {
      __pyx_t_3 = ((__pyx_v_it != __pyx_v_doc.end()) != 0);
      if (!__pyx_t_3) break;

      /* "kNN/cppext/similarity.pyx":48
 *         it = doc.begin()
 *         while it != doc.end():
 *             kv = deref(it)             # <<<<<<<<<<<<<<
 *             doc[kv.first] = log(kv.second + 1) * log(<double>n / \
 *                 <double>bin_word_counter[kv.first])
 */
      __pyx_v_kv = (*__pyx_v_it);

      /* "kNN/cppext/similarity.pyx":50
 *             kv = deref(it)
 *             doc[kv.first] = log(kv.second + 1) * log(<double>n / \
 *                 <double>bin_word_counter[kv.first])             # <<<<<<<<<<<<<<
 *             inc(it)
 * 
 */
      __pyx_t_4 = ((double)(__pyx_v_bin_word_counter[__pyx_v_kv.first]));
      if (unlikely(__pyx_t_4 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_Format(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "kNN/cppext/similarity.pyx":49
 *         while it != doc.end():
 *             kv = deref(it)
 *             doc[kv.first] = log(kv.second + 1) * log(<double>n / \             # <<<<<<<<<<<<<<
 *                 <double>bin_word_counter[kv.first])
 *             inc(it)
 */
      (__pyx_v_doc[__pyx_v_kv.first]) = (log((__pyx_v_kv.second + 1.0)) * log((((double)__pyx_v_n) / __pyx_t_4)));

      /* "kNN/cppext/similarity.pyx":51
 *             doc[kv.first] = log(kv.second + 1) * log(<double>n / \
 *                 <double>bin_word_counter[kv.first])
 *             inc(it)             # <<<<<<<<<<<<<<
 * 
 * cdef double norm(iddict& doc):
 */
      (++__pyx_v_it);
    }
  }

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("kNN.cppext.similarity.transform_tfidf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "kNN/cppext/similarity.pyx":53
 *             inc(it)
 * 
 * cdef double norm(iddict& doc):             # <<<<<<<<<<<<<<
 *     cdef iddictitr it = doc.begin()
 *     cdef idpair hash_tf
 */

static double __pyx_f_3kNN_6cppext_10similarity_norm(__pyx_t_3kNN_6cppext_10similarity_iddict &__pyx_v_doc) {
  __pyx_t_3kNN_6cppext_10similarity_iddictitr __pyx_v_it;
  double __pyx_v_v;
  double __pyx_v_ansatz;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("norm", 0);

  /* "kNN/cppext/similarity.pyx":54
 * 
 * cdef double norm(iddict& doc):
 *     cdef iddictitr it = doc.begin()             # <<<<<<<<<<<<<<
 *     cdef idpair hash_tf
 *     cdef double v
 */
  __pyx_v_it = __pyx_v_doc.begin();

  /* "kNN/cppext/similarity.pyx":57
 *     cdef idpair hash_tf
 *     cdef double v
 *     cdef double ansatz = 0             # <<<<<<<<<<<<<<
 *     while it != doc.end():
 *         v = deref(it).second
 */
  __pyx_v_ansatz = 0.0;

  /* "kNN/cppext/similarity.pyx":58
 *     cdef double v
 *     cdef double ansatz = 0
 *     while it != doc.end():             # <<<<<<<<<<<<<<
 *         v = deref(it).second
 *         inc(it)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_doc.end()) != 0);
    if (!__pyx_t_1) break;

    /* "kNN/cppext/similarity.pyx":59
 *     cdef double ansatz = 0
 *     while it != doc.end():
 *         v = deref(it).second             # <<<<<<<<<<<<<<
 *         inc(it)
 *         ansatz += v*v
 */
    __pyx_t_2 = (*__pyx_v_it).second;
    __pyx_v_v = __pyx_t_2;

    /* "kNN/cppext/similarity.pyx":60
 *     while it != doc.end():
 *         v = deref(it).second
 *         inc(it)             # <<<<<<<<<<<<<<
 *         ansatz += v*v
 *     return log(ansatz ** 0.5)
 */
    (++__pyx_v_it);

    /* "kNN/cppext/similarity.pyx":61
 *         v = deref(it).second
 *         inc(it)
 *         ansatz += v*v             # <<<<<<<<<<<<<<
 *     return log(ansatz ** 0.5)
 * 
 */
    __pyx_v_ansatz = (__pyx_v_ansatz + (__pyx_v_v * __pyx_v_v));
  }

  /* "kNN/cppext/similarity.pyx":62
 *         inc(it)
 *         ansatz += v*v
 *     return log(ansatz ** 0.5)             # <<<<<<<<<<<<<<
 * 
 * ctypedef bint (*compare)(idpair, idpair)
 */
  __pyx_r = log(pow(__pyx_v_ansatz, 0.5));
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "kNN/cppext/similarity.pyx":70
 *     void partial_sort(pairvectitr&, pairvectitr&, pairvectitr&) nogil except +
 * 
 * cdef inline bint comp_func(idpair& x, idpair& y):             # <<<<<<<<<<<<<<
 *     ''' A comparison func. that returns 1/True or 0/False if x > y
 *         based on the value of the second element in the pair, respectively. '''
 */

static CYTHON_INLINE int __pyx_f_3kNN_6cppext_10similarity_comp_func(__pyx_t_3kNN_6cppext_10similarity_idpair &__pyx_v_x, __pyx_t_3kNN_6cppext_10similarity_idpair &__pyx_v_y) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("comp_func", 0);

  /* "kNN/cppext/similarity.pyx":73
 *     ''' A comparison func. that returns 1/True or 0/False if x > y
 *         based on the value of the second element in the pair, respectively. '''
 *     return <bint> x.second > y.second             # <<<<<<<<<<<<<<
 * 
 * cdef pair[vectmap, vectmap] cossim(iddict& d_i, mapvect& t_X, int k, vectvect& t_Y, isdict& parents_index,
 */
  __pyx_r = (((int)__pyx_v_x.second) > __pyx_v_y.second);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "kNN/cppext/similarity.pyx":75
 *     return <bint> x.second > y.second
 * 
 * cdef pair[vectmap, vectmap] cossim(iddict& d_i, mapvect& t_X, int k, vectvect& t_Y, isdict& parents_index,             # <<<<<<<<<<<<<<
 *         isdict& children_index):
 *     ''' For the query `d_i`, calculate its similarity with all docs in corpus `t_X`.
 */

static std::pair<__pyx_t_3kNN_6cppext_10similarity_vectmap,__pyx_t_3kNN_6cppext_10similarity_vectmap> __pyx_f_3kNN_6cppext_10similarity_cossim(__pyx_t_3kNN_6cppext_10similarity_iddict &__pyx_v_d_i, __pyx_t_3kNN_6cppext_10similarity_mapvect &__pyx_v_t_X, int __pyx_v_k, __pyx_t_3kNN_6cppext_10similarity_vectvect &__pyx_v_t_Y, __pyx_t_3kNN_6cppext_10similarity_isdict &__pyx_v_parents_index, __pyx_t_3kNN_6cppext_10similarity_isdict &__pyx_v_children_index) {
  std::vector<__pyx_t_3kNN_6cppext_10similarity_idpair> __pyx_v_doc_scores;
  __pyx_t_3kNN_6cppext_10similarity_vectmap __pyx_v_cat_scores_dict;
  int __pyx_v_t_X_size;
  int __pyx_v_i;
  int __pyx_v_doc_size;
  int __pyx_v_j;
  int __pyx_v_label;
  int __pyx_v_d_i_size;
  int __pyx_v_overlap_count;
  double __pyx_v_threshold;
  int __pyx_v_smaller_size;
  __pyx_t_3kNN_6cppext_10similarity_iddict __pyx_v_doc;
  std::vector<int> __pyx_v_labels;
  double __pyx_v_top;
  double __pyx_v_bottom;
  double __pyx_v_score;
  __pyx_t_3kNN_6cppext_10similarity_iddictitr __pyx_v_it;
  __pyx_t_3kNN_6cppext_10similarity_idpair __pyx_v_kv;
  __pyx_t_3kNN_6cppext_10similarity_iddictitr __pyx_v_got;
  __pyx_t_3kNN_6cppext_10similarity_pairvectitr __pyx_v_it2;
  __pyx_t_3kNN_6cppext_10similarity_vectmap __pyx_v_scores;
  __pyx_t_3kNN_6cppext_10similarity_vectmap __pyx_v_pscores;
  __pyx_t_3kNN_6cppext_10similarity_vectmapitr __pyx_v_got2;
  std::tr1::unordered_set<int> __pyx_v_parents_set;
  std::tr1::unordered_set<int>::iterator __pyx_v_it3;
  int __pyx_v_parent;
  std::tr1::unordered_set<int> __pyx_v_children_set;
  std::pair<__pyx_t_3kNN_6cppext_10similarity_vectmap,__pyx_t_3kNN_6cppext_10similarity_vectmap> __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __pyx_t_3kNN_6cppext_10similarity_idpair __pyx_t_6;
  std::vector<double> __pyx_t_7;
  double __pyx_t_8;
  std::pair<__pyx_t_3kNN_6cppext_10similarity_vectmap,__pyx_t_3kNN_6cppext_10similarity_vectmap> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cossim", 0);

  /* "kNN/cppext/similarity.pyx":85
 *     cdef vector[idpair] doc_scores
 *     cdef vectmap cat_scores_dict
 *     cdef int t_X_size = <int>t_X.size()             # <<<<<<<<<<<<<<
 *     cdef int i, doc_size, j, label
 *     cdef int d_i_size = <int> d_i.size()
 */
  __pyx_v_t_X_size = ((int)__pyx_v_t_X.size());

  /* "kNN/cppext/similarity.pyx":87
 *     cdef int t_X_size = <int>t_X.size()
 *     cdef int i, doc_size, j, label
 *     cdef int d_i_size = <int> d_i.size()             # <<<<<<<<<<<<<<
 *     cdef int overlap_count = 0
 *     cdef double threshold = 0.3
 */
  __pyx_v_d_i_size = ((int)__pyx_v_d_i.size());

  /* "kNN/cppext/similarity.pyx":88
 *     cdef int i, doc_size, j, label
 *     cdef int d_i_size = <int> d_i.size()
 *     cdef int overlap_count = 0             # <<<<<<<<<<<<<<
 *     cdef double threshold = 0.3
 *     cdef int smaller_size
 */
  __pyx_v_overlap_count = 0;

  /* "kNN/cppext/similarity.pyx":89
 *     cdef int d_i_size = <int> d_i.size()
 *     cdef int overlap_count = 0
 *     cdef double threshold = 0.3             # <<<<<<<<<<<<<<
 *     cdef int smaller_size
 *     cdef iddict doc
 */
  __pyx_v_threshold = 0.3;

  /* "kNN/cppext/similarity.pyx":104
 *     cdef int parent
 *     cdef unordered_set[int] children_set
 *     for i in xrange(t_X_size):             # <<<<<<<<<<<<<<
 *         doc = t_X[i]
 *         labels = t_Y[i]
 */
  __pyx_t_1 = __pyx_v_t_X_size;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "kNN/cppext/similarity.pyx":105
 *     cdef unordered_set[int] children_set
 *     for i in xrange(t_X_size):
 *         doc = t_X[i]             # <<<<<<<<<<<<<<
 *         labels = t_Y[i]
 *         # Calculate numerator efficiently
 */
    __pyx_v_doc = (__pyx_v_t_X[__pyx_v_i]);

    /* "kNN/cppext/similarity.pyx":106
 *     for i in xrange(t_X_size):
 *         doc = t_X[i]
 *         labels = t_Y[i]             # <<<<<<<<<<<<<<
 *         # Calculate numerator efficiently
 *         doc_size = <int> doc.size()
 */
    __pyx_v_labels = (__pyx_v_t_Y[__pyx_v_i]);

    /* "kNN/cppext/similarity.pyx":108
 *         labels = t_Y[i]
 *         # Calculate numerator efficiently
 *         doc_size = <int> doc.size()             # <<<<<<<<<<<<<<
 *         top = 0
 *         if doc_size <= d_i_size:
 */
    __pyx_v_doc_size = ((int)__pyx_v_doc.size());

    /* "kNN/cppext/similarity.pyx":109
 *         # Calculate numerator efficiently
 *         doc_size = <int> doc.size()
 *         top = 0             # <<<<<<<<<<<<<<
 *         if doc_size <= d_i_size:
 *             smaller_size = doc_size
 */
    __pyx_v_top = 0.0;

    /* "kNN/cppext/similarity.pyx":110
 *         doc_size = <int> doc.size()
 *         top = 0
 *         if doc_size <= d_i_size:             # <<<<<<<<<<<<<<
 *             smaller_size = doc_size
 *             it = doc.begin()
 */
    __pyx_t_3 = ((__pyx_v_doc_size <= __pyx_v_d_i_size) != 0);
    if (__pyx_t_3) {

      /* "kNN/cppext/similarity.pyx":111
 *         top = 0
 *         if doc_size <= d_i_size:
 *             smaller_size = doc_size             # <<<<<<<<<<<<<<
 *             it = doc.begin()
 *             while it != doc.end():
 */
      __pyx_v_smaller_size = __pyx_v_doc_size;

      /* "kNN/cppext/similarity.pyx":112
 *         if doc_size <= d_i_size:
 *             smaller_size = doc_size
 *             it = doc.begin()             # <<<<<<<<<<<<<<
 *             while it != doc.end():
 *                 kv = deref(it)
 */
      __pyx_v_it = __pyx_v_doc.begin();

      /* "kNN/cppext/similarity.pyx":113
 *             smaller_size = doc_size
 *             it = doc.begin()
 *             while it != doc.end():             # <<<<<<<<<<<<<<
 *                 kv = deref(it)
 *                 inc(it)
 */
      while (1) {
        __pyx_t_3 = ((__pyx_v_it != __pyx_v_doc.end()) != 0);
        if (!__pyx_t_3) break;

        /* "kNN/cppext/similarity.pyx":114
 *             it = doc.begin()
 *             while it != doc.end():
 *                 kv = deref(it)             # <<<<<<<<<<<<<<
 *                 inc(it)
 *                 got = d_i.find(kv.first)
 */
        __pyx_v_kv = (*__pyx_v_it);

        /* "kNN/cppext/similarity.pyx":115
 *             while it != doc.end():
 *                 kv = deref(it)
 *                 inc(it)             # <<<<<<<<<<<<<<
 *                 got = d_i.find(kv.first)
 *                 if got != d_i.end():
 */
        (++__pyx_v_it);

        /* "kNN/cppext/similarity.pyx":116
 *                 kv = deref(it)
 *                 inc(it)
 *                 got = d_i.find(kv.first)             # <<<<<<<<<<<<<<
 *                 if got != d_i.end():
 *                     overlap_count += 1
 */
        __pyx_v_got = __pyx_v_d_i.find(__pyx_v_kv.first);

        /* "kNN/cppext/similarity.pyx":117
 *                 inc(it)
 *                 got = d_i.find(kv.first)
 *                 if got != d_i.end():             # <<<<<<<<<<<<<<
 *                     overlap_count += 1
 *                     top += kv.second * deref(got).second
 */
        __pyx_t_3 = ((__pyx_v_got != __pyx_v_d_i.end()) != 0);
        if (__pyx_t_3) {

          /* "kNN/cppext/similarity.pyx":118
 *                 got = d_i.find(kv.first)
 *                 if got != d_i.end():
 *                     overlap_count += 1             # <<<<<<<<<<<<<<
 *                     top += kv.second * deref(got).second
 *         else:
 */
          __pyx_v_overlap_count = (__pyx_v_overlap_count + 1);

          /* "kNN/cppext/similarity.pyx":119
 *                 if got != d_i.end():
 *                     overlap_count += 1
 *                     top += kv.second * deref(got).second             # <<<<<<<<<<<<<<
 *         else:
 *             smaller_size = d_i_size
 */
          __pyx_v_top = (__pyx_v_top + (__pyx_v_kv.second * (*__pyx_v_got).second));
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
      goto __pyx_L5;
    }
    /*else*/ {

      /* "kNN/cppext/similarity.pyx":121
 *                     top += kv.second * deref(got).second
 *         else:
 *             smaller_size = d_i_size             # <<<<<<<<<<<<<<
 *             it = d_i.begin()
 *             while it != d_i.end():
 */
      __pyx_v_smaller_size = __pyx_v_d_i_size;

      /* "kNN/cppext/similarity.pyx":122
 *         else:
 *             smaller_size = d_i_size
 *             it = d_i.begin()             # <<<<<<<<<<<<<<
 *             while it != d_i.end():
 *                 kv = deref(it)
 */
      __pyx_v_it = __pyx_v_d_i.begin();

      /* "kNN/cppext/similarity.pyx":123
 *             smaller_size = d_i_size
 *             it = d_i.begin()
 *             while it != d_i.end():             # <<<<<<<<<<<<<<
 *                 kv = deref(it)
 *                 inc(it)
 */
      while (1) {
        __pyx_t_3 = ((__pyx_v_it != __pyx_v_d_i.end()) != 0);
        if (!__pyx_t_3) break;

        /* "kNN/cppext/similarity.pyx":124
 *             it = d_i.begin()
 *             while it != d_i.end():
 *                 kv = deref(it)             # <<<<<<<<<<<<<<
 *                 inc(it)
 *                 got = doc.find(kv.first)
 */
        __pyx_v_kv = (*__pyx_v_it);

        /* "kNN/cppext/similarity.pyx":125
 *             while it != d_i.end():
 *                 kv = deref(it)
 *                 inc(it)             # <<<<<<<<<<<<<<
 *                 got = doc.find(kv.first)
 *                 if got != doc.end():
 */
        (++__pyx_v_it);

        /* "kNN/cppext/similarity.pyx":126
 *                 kv = deref(it)
 *                 inc(it)
 *                 got = doc.find(kv.first)             # <<<<<<<<<<<<<<
 *                 if got != doc.end():
 *                     overlap_count += 1
 */
        __pyx_v_got = __pyx_v_doc.find(__pyx_v_kv.first);

        /* "kNN/cppext/similarity.pyx":127
 *                 inc(it)
 *                 got = doc.find(kv.first)
 *                 if got != doc.end():             # <<<<<<<<<<<<<<
 *                     overlap_count += 1
 *                     top += kv.second * deref(got).second
 */
        __pyx_t_3 = ((__pyx_v_got != __pyx_v_doc.end()) != 0);
        if (__pyx_t_3) {

          /* "kNN/cppext/similarity.pyx":128
 *                 got = doc.find(kv.first)
 *                 if got != doc.end():
 *                     overlap_count += 1             # <<<<<<<<<<<<<<
 *                     top += kv.second * deref(got).second
 *         # Calculate denominator efficiently
 */
          __pyx_v_overlap_count = (__pyx_v_overlap_count + 1);

          /* "kNN/cppext/similarity.pyx":129
 *                 if got != doc.end():
 *                     overlap_count += 1
 *                     top += kv.second * deref(got).second             # <<<<<<<<<<<<<<
 *         # Calculate denominator efficiently
 *         # Set a magic-number threshold to skip if top is small
 */
          __pyx_v_top = (__pyx_v_top + (__pyx_v_kv.second * (*__pyx_v_got).second));
          goto __pyx_L11;
        }
        __pyx_L11:;
      }
    }
    __pyx_L5:;

    /* "kNN/cppext/similarity.pyx":132
 *         # Calculate denominator efficiently
 *         # Set a magic-number threshold to skip if top is small
 *         if overlap_count > <int>(threshold * smaller_size):             # <<<<<<<<<<<<<<
 *             bottom = norm(d_i) * norm(doc)
 *             score = top / bottom
 */
    __pyx_t_3 = ((__pyx_v_overlap_count > ((int)(__pyx_v_threshold * __pyx_v_smaller_size))) != 0);
    if (__pyx_t_3) {

      /* "kNN/cppext/similarity.pyx":133
 *         # Set a magic-number threshold to skip if top is small
 *         if overlap_count > <int>(threshold * smaller_size):
 *             bottom = norm(d_i) * norm(doc)             # <<<<<<<<<<<<<<
 *             score = top / bottom
 *         else:
 */
      __pyx_v_bottom = (__pyx_f_3kNN_6cppext_10similarity_norm(__pyx_v_d_i) * __pyx_f_3kNN_6cppext_10similarity_norm(__pyx_v_doc));

      /* "kNN/cppext/similarity.pyx":134
 *         if overlap_count > <int>(threshold * smaller_size):
 *             bottom = norm(d_i) * norm(doc)
 *             score = top / bottom             # <<<<<<<<<<<<<<
 *         else:
 *             score = 0
 */
      if (unlikely(__pyx_v_bottom == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_Format(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_score = (__pyx_v_top / __pyx_v_bottom);
      goto __pyx_L12;
    }
    /*else*/ {

      /* "kNN/cppext/similarity.pyx":136
 *             score = top / bottom
 *         else:
 *             score = 0             # <<<<<<<<<<<<<<
 *         for j in xrange(<int>labels.size()):
 *             label = labels[j]
 */
      __pyx_v_score = 0.0;
    }
    __pyx_L12:;

    /* "kNN/cppext/similarity.pyx":137
 *         else:
 *             score = 0
 *         for j in xrange(<int>labels.size()):             # <<<<<<<<<<<<<<
 *             label = labels[j]
 *             doc_scores.push_back(idpair(label,score))
 */
    __pyx_t_4 = ((int)__pyx_v_labels.size());
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_j = __pyx_t_5;

      /* "kNN/cppext/similarity.pyx":138
 *             score = 0
 *         for j in xrange(<int>labels.size()):
 *             label = labels[j]             # <<<<<<<<<<<<<<
 *             doc_scores.push_back(idpair(label,score))
 *             got2 = cat_scores_dict.find(label)
 */
      __pyx_v_label = (__pyx_v_labels[__pyx_v_j]);

      /* "kNN/cppext/similarity.pyx":139
 *         for j in xrange(<int>labels.size()):
 *             label = labels[j]
 *             doc_scores.push_back(idpair(label,score))             # <<<<<<<<<<<<<<
 *             got2 = cat_scores_dict.find(label)
 *             if got2 == cat_scores_dict.end():
 */
      try {
        __pyx_t_6 = __pyx_t_3kNN_6cppext_10similarity_idpair(__pyx_v_label, __pyx_v_score);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_doc_scores.push_back(__pyx_t_6);

      /* "kNN/cppext/similarity.pyx":140
 *             label = labels[j]
 *             doc_scores.push_back(idpair(label,score))
 *             got2 = cat_scores_dict.find(label)             # <<<<<<<<<<<<<<
 *             if got2 == cat_scores_dict.end():
 *                 cat_scores_dict[label] = vector[double]()
 */
      __pyx_v_got2 = __pyx_v_cat_scores_dict.find(__pyx_v_label);

      /* "kNN/cppext/similarity.pyx":141
 *             doc_scores.push_back(idpair(label,score))
 *             got2 = cat_scores_dict.find(label)
 *             if got2 == cat_scores_dict.end():             # <<<<<<<<<<<<<<
 *                 cat_scores_dict[label] = vector[double]()
 *             cat_scores_dict[label].push_back(score)
 */
      __pyx_t_3 = ((__pyx_v_got2 == __pyx_v_cat_scores_dict.end()) != 0);
      if (__pyx_t_3) {

        /* "kNN/cppext/similarity.pyx":142
 *             got2 = cat_scores_dict.find(label)
 *             if got2 == cat_scores_dict.end():
 *                 cat_scores_dict[label] = vector[double]()             # <<<<<<<<<<<<<<
 *             cat_scores_dict[label].push_back(score)
 *     # Return the k-NN (aka top-k similar examples)
 */
        try {
          __pyx_t_7 = std::vector<double>();
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_cat_scores_dict[__pyx_v_label]) = __pyx_t_7;
        goto __pyx_L15;
      }
      __pyx_L15:;

      /* "kNN/cppext/similarity.pyx":143
 *             if got2 == cat_scores_dict.end():
 *                 cat_scores_dict[label] = vector[double]()
 *             cat_scores_dict[label].push_back(score)             # <<<<<<<<<<<<<<
 *     # Return the k-NN (aka top-k similar examples)
 *     partial_sort(doc_scores.begin(), doc_scores.begin()+k, doc_scores.end(),
 */
      (__pyx_v_cat_scores_dict[__pyx_v_label]).push_back(__pyx_v_score);
    }
  }

  /* "kNN/cppext/similarity.pyx":146
 *     # Return the k-NN (aka top-k similar examples)
 *     partial_sort(doc_scores.begin(), doc_scores.begin()+k, doc_scores.end(),
 *         comp_func)             # <<<<<<<<<<<<<<
 *     # optimized/transformed scores & pscores
 *     it2 = doc_scores.begin()
 */
  try {
    std::partial_sort(__pyx_v_doc_scores.begin(), (__pyx_v_doc_scores.begin() + __pyx_v_k), __pyx_v_doc_scores.end(), __pyx_f_3kNN_6cppext_10similarity_comp_func);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "kNN/cppext/similarity.pyx":148
 *         comp_func)
 *     # optimized/transformed scores & pscores
 *     it2 = doc_scores.begin()             # <<<<<<<<<<<<<<
 *     for i in xrange(k):
 *         kv = deref(it2)
 */
  __pyx_v_it2 = __pyx_v_doc_scores.begin();

  /* "kNN/cppext/similarity.pyx":149
 *     # optimized/transformed scores & pscores
 *     it2 = doc_scores.begin()
 *     for i in xrange(k):             # <<<<<<<<<<<<<<
 *         kv = deref(it2)
 *         label = kv.first
 */
  __pyx_t_1 = __pyx_v_k;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "kNN/cppext/similarity.pyx":150
 *     it2 = doc_scores.begin()
 *     for i in xrange(k):
 *         kv = deref(it2)             # <<<<<<<<<<<<<<
 *         label = kv.first
 *         score = kv.second
 */
    __pyx_v_kv = (*__pyx_v_it2);

    /* "kNN/cppext/similarity.pyx":151
 *     for i in xrange(k):
 *         kv = deref(it2)
 *         label = kv.first             # <<<<<<<<<<<<<<
 *         score = kv.second
 *         inc(it2)
 */
    __pyx_t_4 = __pyx_v_kv.first;
    __pyx_v_label = __pyx_t_4;

    /* "kNN/cppext/similarity.pyx":152
 *         kv = deref(it2)
 *         label = kv.first
 *         score = kv.second             # <<<<<<<<<<<<<<
 *         inc(it2)
 *         got2 = scores.find(label)
 */
    __pyx_t_8 = __pyx_v_kv.second;
    __pyx_v_score = __pyx_t_8;

    /* "kNN/cppext/similarity.pyx":153
 *         label = kv.first
 *         score = kv.second
 *         inc(it2)             # <<<<<<<<<<<<<<
 *         got2 = scores.find(label)
 *         if got2 == scores.end():
 */
    (++__pyx_v_it2);

    /* "kNN/cppext/similarity.pyx":154
 *         score = kv.second
 *         inc(it2)
 *         got2 = scores.find(label)             # <<<<<<<<<<<<<<
 *         if got2 == scores.end():
 *             scores[label] = vector[double]()
 */
    __pyx_v_got2 = __pyx_v_scores.find(__pyx_v_label);

    /* "kNN/cppext/similarity.pyx":155
 *         inc(it2)
 *         got2 = scores.find(label)
 *         if got2 == scores.end():             # <<<<<<<<<<<<<<
 *             scores[label] = vector[double]()
 *         scores[label].push_back(score)
 */
    __pyx_t_3 = ((__pyx_v_got2 == __pyx_v_scores.end()) != 0);
    if (__pyx_t_3) {

      /* "kNN/cppext/similarity.pyx":156
 *         got2 = scores.find(label)
 *         if got2 == scores.end():
 *             scores[label] = vector[double]()             # <<<<<<<<<<<<<<
 *         scores[label].push_back(score)
 *         parents_set = parents_index[label]
 */
      try {
        __pyx_t_7 = std::vector<double>();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      (__pyx_v_scores[__pyx_v_label]) = __pyx_t_7;
      goto __pyx_L18;
    }
    __pyx_L18:;

    /* "kNN/cppext/similarity.pyx":157
 *         if got2 == scores.end():
 *             scores[label] = vector[double]()
 *         scores[label].push_back(score)             # <<<<<<<<<<<<<<
 *         parents_set = parents_index[label]
 *         it3 = parents_set.begin()
 */
    (__pyx_v_scores[__pyx_v_label]).push_back(__pyx_v_score);

    /* "kNN/cppext/similarity.pyx":158
 *             scores[label] = vector[double]()
 *         scores[label].push_back(score)
 *         parents_set = parents_index[label]             # <<<<<<<<<<<<<<
 *         it3 = parents_set.begin()
 *         while it3 != parents_set.end():
 */
    __pyx_v_parents_set = (__pyx_v_parents_index[__pyx_v_label]);

    /* "kNN/cppext/similarity.pyx":159
 *         scores[label].push_back(score)
 *         parents_set = parents_index[label]
 *         it3 = parents_set.begin()             # <<<<<<<<<<<<<<
 *         while it3 != parents_set.end():
 *             parent = deref(it3)
 */
    __pyx_v_it3 = __pyx_v_parents_set.begin();

    /* "kNN/cppext/similarity.pyx":160
 *         parents_set = parents_index[label]
 *         it3 = parents_set.begin()
 *         while it3 != parents_set.end():             # <<<<<<<<<<<<<<
 *             parent = deref(it3)
 *             inc(it3)
 */
    while (1) {
      __pyx_t_3 = ((__pyx_v_it3 != __pyx_v_parents_set.end()) != 0);
      if (!__pyx_t_3) break;

      /* "kNN/cppext/similarity.pyx":161
 *         it3 = parents_set.begin()
 *         while it3 != parents_set.end():
 *             parent = deref(it3)             # <<<<<<<<<<<<<<
 *             inc(it3)
 *             children_set = children_index[parent]
 */
      __pyx_v_parent = (*__pyx_v_it3);

      /* "kNN/cppext/similarity.pyx":162
 *         while it3 != parents_set.end():
 *             parent = deref(it3)
 *             inc(it3)             # <<<<<<<<<<<<<<
 *             children_set = children_index[parent]
 *             got2 = pscores.find(label)
 */
      (++__pyx_v_it3);

      /* "kNN/cppext/similarity.pyx":163
 *             parent = deref(it3)
 *             inc(it3)
 *             children_set = children_index[parent]             # <<<<<<<<<<<<<<
 *             got2 = pscores.find(label)
 *             if got2 == pscores.end():
 */
      __pyx_v_children_set = (__pyx_v_children_index[__pyx_v_parent]);

      /* "kNN/cppext/similarity.pyx":164
 *             inc(it3)
 *             children_set = children_index[parent]
 *             got2 = pscores.find(label)             # <<<<<<<<<<<<<<
 *             if got2 == pscores.end():
 *                 pscores[label] = vector[double]()
 */
      __pyx_v_got2 = __pyx_v_pscores.find(__pyx_v_label);

      /* "kNN/cppext/similarity.pyx":165
 *             children_set = children_index[parent]
 *             got2 = pscores.find(label)
 *             if got2 == pscores.end():             # <<<<<<<<<<<<<<
 *                 pscores[label] = vector[double]()
 *             pscores[label].push_back(<double>children_set.size())
 */
      __pyx_t_3 = ((__pyx_v_got2 == __pyx_v_pscores.end()) != 0);
      if (__pyx_t_3) {

        /* "kNN/cppext/similarity.pyx":166
 *             got2 = pscores.find(label)
 *             if got2 == pscores.end():
 *                 pscores[label] = vector[double]()             # <<<<<<<<<<<<<<
 *             pscores[label].push_back(<double>children_set.size())
 *     return pair[vectmap, vectmap](scores, pscores)
 */
        try {
          __pyx_t_7 = std::vector<double>();
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_pscores[__pyx_v_label]) = __pyx_t_7;
        goto __pyx_L21;
      }
      __pyx_L21:;

      /* "kNN/cppext/similarity.pyx":167
 *             if got2 == pscores.end():
 *                 pscores[label] = vector[double]()
 *             pscores[label].push_back(<double>children_set.size())             # <<<<<<<<<<<<<<
 *     return pair[vectmap, vectmap](scores, pscores)
 * 
 */
      (__pyx_v_pscores[__pyx_v_label]).push_back(((double)__pyx_v_children_set.size()));
    }
  }

  /* "kNN/cppext/similarity.pyx":168
 *                 pscores[label] = vector[double]()
 *             pscores[label].push_back(<double>children_set.size())
 *     return pair[vectmap, vectmap](scores, pscores)             # <<<<<<<<<<<<<<
 * 
 * cdef void cossim2(iddict& d_i, mapvect& t_X, int k, vectvect& t_Y, isdict& parents_index,
 */
  try {
    __pyx_t_9 = std::pair<__pyx_t_3kNN_6cppext_10similarity_vectmap,__pyx_t_3kNN_6cppext_10similarity_vectmap>(__pyx_v_scores, __pyx_v_pscores);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("kNN.cppext.similarity.cossim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "kNN/cppext/similarity.pyx":170
 *     return pair[vectmap, vectmap](scores, pscores)
 * 
 * cdef void cossim2(iddict& d_i, mapvect& t_X, int k, vectvect& t_Y, isdict& parents_index,             # <<<<<<<<<<<<<<
 *         isdict& children_index, isetdict& iidx):
 *     # Find all candidate doc numbers
 */

static void __pyx_f_3kNN_6cppext_10similarity_cossim2(__pyx_t_3kNN_6cppext_10similarity_iddict &__pyx_v_d_i, __pyx_t_3kNN_6cppext_10similarity_mapvect &__pyx_v_t_X, int __pyx_v_k, __pyx_t_3kNN_6cppext_10similarity_vectvect &__pyx_v_t_Y, __pyx_t_3kNN_6cppext_10similarity_isdict &__pyx_v_parents_index, __pyx_t_3kNN_6cppext_10similarity_isdict &__pyx_v_children_index, __pyx_t_3kNN_6cppext_10similarity_isetdict &__pyx_v_iidx) {
  __pyx_t_3kNN_6cppext_10similarity_iddictitr __pyx_v_it;
  int __pyx_v_word;
  __pyx_t_3kNN_6cppext_10similarity_isetdictitr __pyx_v_got;
  __pyx_t_3kNN_6cppext_10similarity_iset __pyx_v_dns;
  __pyx_t_3kNN_6cppext_10similarity_isetitr __pyx_v_it2;
  __pyx_t_3kNN_6cppext_10similarity_iset __pyx_v_doc_nums;
  int __pyx_v_doc_num;
  __pyx_t_3kNN_6cppext_10similarity_iddict __pyx_v_doc;
  std::vector<int> __pyx_v_labels;
  int __pyx_v_d_i_size;
  int __pyx_v_doc_size;
  double __pyx_v_top;
  __pyx_t_3kNN_6cppext_10similarity_idpair __pyx_v_kv;
  __pyx_t_3kNN_6cppext_10similarity_iddictitr __pyx_v_got2;
  PyObject *__pyx_v_bottom = 0;
  PyObject *__pyx_v_score = 0;
  int __pyx_v_j;
  int __pyx_v_label;
  std::vector<std::pair<int,double> > __pyx_v_doc_scores;
  __pyx_t_3kNN_6cppext_10similarity_vectmap __pyx_v_cat_scores_dict;
  __pyx_t_3kNN_6cppext_10similarity_vectmapitr __pyx_v_got3;
  int __pyx_v_kk;
  __pyx_t_3kNN_6cppext_10similarity_pairvectitr __pyx_v_it3;
  CYTHON_UNUSED int __pyx_v_i;
  __pyx_t_3kNN_6cppext_10similarity_vectmap __pyx_v_scores;
  __pyx_t_3kNN_6cppext_10similarity_iset __pyx_v_parents_set;
  __pyx_t_3kNN_6cppext_10similarity_isetitr __pyx_v_it4;
  int __pyx_v_parent;
  __pyx_t_3kNN_6cppext_10similarity_iset __pyx_v_children_set;
  __pyx_t_3kNN_6cppext_10similarity_vectmap __pyx_v_pscores;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::tr1::unordered_set<int> __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  double __pyx_t_7;
  __pyx_t_3kNN_6cppext_10similarity_idpair __pyx_t_8;
  std::vector<double> __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cossim2", 0);

  /* "kNN/cppext/similarity.pyx":179
 *     cdef isetitr it2
 *     cdef iset doc_nums
 *     it = d_i.begin()             # <<<<<<<<<<<<<<
 *     while it != d_i.end():
 *         word = deref(it).first
 */
  __pyx_v_it = __pyx_v_d_i.begin();

  /* "kNN/cppext/similarity.pyx":180
 *     cdef iset doc_nums
 *     it = d_i.begin()
 *     while it != d_i.end():             # <<<<<<<<<<<<<<
 *         word = deref(it).first
 *         got = iidx.find(word)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_d_i.end()) != 0);
    if (!__pyx_t_1) break;

    /* "kNN/cppext/similarity.pyx":181
 *     it = d_i.begin()
 *     while it != d_i.end():
 *         word = deref(it).first             # <<<<<<<<<<<<<<
 *         got = iidx.find(word)
 *         inc(it)
 */
    __pyx_t_2 = (*__pyx_v_it).first;
    __pyx_v_word = __pyx_t_2;

    /* "kNN/cppext/similarity.pyx":182
 *     while it != d_i.end():
 *         word = deref(it).first
 *         got = iidx.find(word)             # <<<<<<<<<<<<<<
 *         inc(it)
 *         if got != iidx.end():
 */
    __pyx_v_got = __pyx_v_iidx.find(__pyx_v_word);

    /* "kNN/cppext/similarity.pyx":183
 *         word = deref(it).first
 *         got = iidx.find(word)
 *         inc(it)             # <<<<<<<<<<<<<<
 *         if got != iidx.end():
 *             dns = deref(got).second
 */
    (++__pyx_v_it);

    /* "kNN/cppext/similarity.pyx":184
 *         got = iidx.find(word)
 *         inc(it)
 *         if got != iidx.end():             # <<<<<<<<<<<<<<
 *             dns = deref(got).second
 *             it2 = dns.begin()
 */
    __pyx_t_1 = ((__pyx_v_got != __pyx_v_iidx.end()) != 0);
    if (__pyx_t_1) {

      /* "kNN/cppext/similarity.pyx":185
 *         inc(it)
 *         if got != iidx.end():
 *             dns = deref(got).second             # <<<<<<<<<<<<<<
 *             it2 = dns.begin()
 *             while it2 != dns.begin():
 */
      __pyx_t_3 = (*__pyx_v_got).second;
      __pyx_v_dns = __pyx_t_3;

      /* "kNN/cppext/similarity.pyx":186
 *         if got != iidx.end():
 *             dns = deref(got).second
 *             it2 = dns.begin()             # <<<<<<<<<<<<<<
 *             while it2 != dns.begin():
 *                 doc_nums.insert(deref(it2))
 */
      __pyx_v_it2 = __pyx_v_dns.begin();

      /* "kNN/cppext/similarity.pyx":187
 *             dns = deref(got).second
 *             it2 = dns.begin()
 *             while it2 != dns.begin():             # <<<<<<<<<<<<<<
 *                 doc_nums.insert(deref(it2))
 *                 inc(it2)
 */
      while (1) {
        __pyx_t_1 = ((__pyx_v_it2 != __pyx_v_dns.begin()) != 0);
        if (!__pyx_t_1) break;

        /* "kNN/cppext/similarity.pyx":188
 *             it2 = dns.begin()
 *             while it2 != dns.begin():
 *                 doc_nums.insert(deref(it2))             # <<<<<<<<<<<<<<
 *                 inc(it2)
 *     # Access only the candidate docs index by doc_nums
 */
        __pyx_v_doc_nums.insert((*__pyx_v_it2));

        /* "kNN/cppext/similarity.pyx":189
 *             while it2 != dns.begin():
 *                 doc_nums.insert(deref(it2))
 *                 inc(it2)             # <<<<<<<<<<<<<<
 *     # Access only the candidate docs index by doc_nums
 *     cdef int doc_num
 */
        (++__pyx_v_it2);
      }
      goto __pyx_L5;
    }
    __pyx_L5:;
  }

  /* "kNN/cppext/similarity.pyx":206
 *     cdef vectmapitr got3
 * 
 *     d_i_size = d_i.size()             # <<<<<<<<<<<<<<
 *     it2 = doc_nums.begin()
 *     while it2 != doc_nums.end():
 */
  __pyx_v_d_i_size = __pyx_v_d_i.size();

  /* "kNN/cppext/similarity.pyx":207
 * 
 *     d_i_size = d_i.size()
 *     it2 = doc_nums.begin()             # <<<<<<<<<<<<<<
 *     while it2 != doc_nums.end():
 *         doc_num = deref(it2)
 */
  __pyx_v_it2 = __pyx_v_doc_nums.begin();

  /* "kNN/cppext/similarity.pyx":208
 *     d_i_size = d_i.size()
 *     it2 = doc_nums.begin()
 *     while it2 != doc_nums.end():             # <<<<<<<<<<<<<<
 *         doc_num = deref(it2)
 *         doc = t_X[doc_num]
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it2 != __pyx_v_doc_nums.end()) != 0);
    if (!__pyx_t_1) break;

    /* "kNN/cppext/similarity.pyx":209
 *     it2 = doc_nums.begin()
 *     while it2 != doc_nums.end():
 *         doc_num = deref(it2)             # <<<<<<<<<<<<<<
 *         doc = t_X[doc_num]
 *         inc(it2)
 */
    __pyx_v_doc_num = (*__pyx_v_it2);

    /* "kNN/cppext/similarity.pyx":210
 *     while it2 != doc_nums.end():
 *         doc_num = deref(it2)
 *         doc = t_X[doc_num]             # <<<<<<<<<<<<<<
 *         inc(it2)
 *         labels = t_Y[doc_num]
 */
    __pyx_v_doc = (__pyx_v_t_X[__pyx_v_doc_num]);

    /* "kNN/cppext/similarity.pyx":211
 *         doc_num = deref(it2)
 *         doc = t_X[doc_num]
 *         inc(it2)             # <<<<<<<<<<<<<<
 *         labels = t_Y[doc_num]
 *         # Calculate numerator efficiently
 */
    (++__pyx_v_it2);

    /* "kNN/cppext/similarity.pyx":212
 *         doc = t_X[doc_num]
 *         inc(it2)
 *         labels = t_Y[doc_num]             # <<<<<<<<<<<<<<
 *         # Calculate numerator efficiently
 *         doc_size = doc.size()
 */
    __pyx_v_labels = (__pyx_v_t_Y[__pyx_v_doc_num]);

    /* "kNN/cppext/similarity.pyx":214
 *         labels = t_Y[doc_num]
 *         # Calculate numerator efficiently
 *         doc_size = doc.size()             # <<<<<<<<<<<<<<
 *         top = 0
 *         if doc_size <= d_i_size:
 */
    __pyx_v_doc_size = __pyx_v_doc.size();

    /* "kNN/cppext/similarity.pyx":215
 *         # Calculate numerator efficiently
 *         doc_size = doc.size()
 *         top = 0             # <<<<<<<<<<<<<<
 *         if doc_size <= d_i_size:
 *             it = doc.begin()
 */
    __pyx_v_top = 0.0;

    /* "kNN/cppext/similarity.pyx":216
 *         doc_size = doc.size()
 *         top = 0
 *         if doc_size <= d_i_size:             # <<<<<<<<<<<<<<
 *             it = doc.begin()
 *             while it != doc.end():
 */
    __pyx_t_1 = ((__pyx_v_doc_size <= __pyx_v_d_i_size) != 0);
    if (__pyx_t_1) {

      /* "kNN/cppext/similarity.pyx":217
 *         top = 0
 *         if doc_size <= d_i_size:
 *             it = doc.begin()             # <<<<<<<<<<<<<<
 *             while it != doc.end():
 *                 kv = deref(it)
 */
      __pyx_v_it = __pyx_v_doc.begin();

      /* "kNN/cppext/similarity.pyx":218
 *         if doc_size <= d_i_size:
 *             it = doc.begin()
 *             while it != doc.end():             # <<<<<<<<<<<<<<
 *                 kv = deref(it)
 *                 inc(it)
 */
      while (1) {
        __pyx_t_1 = ((__pyx_v_it != __pyx_v_doc.end()) != 0);
        if (!__pyx_t_1) break;

        /* "kNN/cppext/similarity.pyx":219
 *             it = doc.begin()
 *             while it != doc.end():
 *                 kv = deref(it)             # <<<<<<<<<<<<<<
 *                 inc(it)
 *                 got2 = d_i.find(kv.first)
 */
        __pyx_v_kv = (*__pyx_v_it);

        /* "kNN/cppext/similarity.pyx":220
 *             while it != doc.end():
 *                 kv = deref(it)
 *                 inc(it)             # <<<<<<<<<<<<<<
 *                 got2 = d_i.find(kv.first)
 *                 if got2 != d_i.end():
 */
        (++__pyx_v_it);

        /* "kNN/cppext/similarity.pyx":221
 *                 kv = deref(it)
 *                 inc(it)
 *                 got2 = d_i.find(kv.first)             # <<<<<<<<<<<<<<
 *                 if got2 != d_i.end():
 *                     top += kv.second * deref(got2).second
 */
        __pyx_v_got2 = __pyx_v_d_i.find(__pyx_v_kv.first);

        /* "kNN/cppext/similarity.pyx":222
 *                 inc(it)
 *                 got2 = d_i.find(kv.first)
 *                 if got2 != d_i.end():             # <<<<<<<<<<<<<<
 *                     top += kv.second * deref(got2).second
 *         else:
 */
        __pyx_t_1 = ((__pyx_v_got2 != __pyx_v_d_i.end()) != 0);
        if (__pyx_t_1) {

          /* "kNN/cppext/similarity.pyx":223
 *                 got2 = d_i.find(kv.first)
 *                 if got2 != d_i.end():
 *                     top += kv.second * deref(got2).second             # <<<<<<<<<<<<<<
 *         else:
 *             it = d_i.begin()
 */
          __pyx_v_top = (__pyx_v_top + (__pyx_v_kv.second * (*__pyx_v_got2).second));
          goto __pyx_L13;
        }
        __pyx_L13:;
      }
      goto __pyx_L10;
    }
    /*else*/ {

      /* "kNN/cppext/similarity.pyx":225
 *                     top += kv.second * deref(got2).second
 *         else:
 *             it = d_i.begin()             # <<<<<<<<<<<<<<
 *             while it != d_i.end():
 *                 kv = deref(it)
 */
      __pyx_v_it = __pyx_v_d_i.begin();

      /* "kNN/cppext/similarity.pyx":226
 *         else:
 *             it = d_i.begin()
 *             while it != d_i.end():             # <<<<<<<<<<<<<<
 *                 kv = deref(it)
 *                 inc(it)
 */
      while (1) {
        __pyx_t_1 = ((__pyx_v_it != __pyx_v_d_i.end()) != 0);
        if (!__pyx_t_1) break;

        /* "kNN/cppext/similarity.pyx":227
 *             it = d_i.begin()
 *             while it != d_i.end():
 *                 kv = deref(it)             # <<<<<<<<<<<<<<
 *                 inc(it)
 *                 got2 = doc.find(kv.first)
 */
        __pyx_v_kv = (*__pyx_v_it);

        /* "kNN/cppext/similarity.pyx":228
 *             while it != d_i.end():
 *                 kv = deref(it)
 *                 inc(it)             # <<<<<<<<<<<<<<
 *                 got2 = doc.find(kv.first)
 *                 if got2 != doc.end():
 */
        (++__pyx_v_it);

        /* "kNN/cppext/similarity.pyx":229
 *                 kv = deref(it)
 *                 inc(it)
 *                 got2 = doc.find(kv.first)             # <<<<<<<<<<<<<<
 *                 if got2 != doc.end():
 *                     top += kv.second * deref(got2).second
 */
        __pyx_v_got2 = __pyx_v_doc.find(__pyx_v_kv.first);

        /* "kNN/cppext/similarity.pyx":230
 *                 inc(it)
 *                 got2 = doc.find(kv.first)
 *                 if got2 != doc.end():             # <<<<<<<<<<<<<<
 *                     top += kv.second * deref(got2).second
 *         # Calculate denominator
 */
        __pyx_t_1 = ((__pyx_v_got2 != __pyx_v_doc.end()) != 0);
        if (__pyx_t_1) {

          /* "kNN/cppext/similarity.pyx":231
 *                 got2 = doc.find(kv.first)
 *                 if got2 != doc.end():
 *                     top += kv.second * deref(got2).second             # <<<<<<<<<<<<<<
 *         # Calculate denominator
 *         if top > 0:
 */
          __pyx_v_top = (__pyx_v_top + (__pyx_v_kv.second * (*__pyx_v_got2).second));
          goto __pyx_L16;
        }
        __pyx_L16:;
      }
    }
    __pyx_L10:;

    /* "kNN/cppext/similarity.pyx":233
 *                     top += kv.second * deref(got2).second
 *         # Calculate denominator
 *         if top > 0:             # <<<<<<<<<<<<<<
 *             bottom = norm(d_i) * norm(doc)
 *             score = top / bottom
 */
    __pyx_t_1 = ((__pyx_v_top > 0.0) != 0);
    if (__pyx_t_1) {

      /* "kNN/cppext/similarity.pyx":234
 *         # Calculate denominator
 *         if top > 0:
 *             bottom = norm(d_i) * norm(doc)             # <<<<<<<<<<<<<<
 *             score = top / bottom
 *         else:
 */
      __pyx_t_4 = PyFloat_FromDouble((__pyx_f_3kNN_6cppext_10similarity_norm(__pyx_v_d_i) * __pyx_f_3kNN_6cppext_10similarity_norm(__pyx_v_doc))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF(__pyx_v_bottom);
      __pyx_v_bottom = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "kNN/cppext/similarity.pyx":235
 *         if top > 0:
 *             bottom = norm(d_i) * norm(doc)
 *             score = top / bottom             # <<<<<<<<<<<<<<
 *         else:
 *             score = 0
 */
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_top); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_bottom); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_v_score);
      __pyx_v_score = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L17;
    }
    /*else*/ {

      /* "kNN/cppext/similarity.pyx":237
 *             score = top / bottom
 *         else:
 *             score = 0             # <<<<<<<<<<<<<<
 *         # Push into cat_scores_dict & doc_scores
 *         for j in xrange(labels.size()):
 */
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_XDECREF(__pyx_v_score);
      __pyx_v_score = __pyx_int_0;
    }
    __pyx_L17:;

    /* "kNN/cppext/similarity.pyx":239
 *             score = 0
 *         # Push into cat_scores_dict & doc_scores
 *         for j in xrange(labels.size()):             # <<<<<<<<<<<<<<
 *             label = labels[j]
 *             doc_scores.push_back(idpair(label, score))
 */
    __pyx_t_6 = __pyx_v_labels.size();
    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_6; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "kNN/cppext/similarity.pyx":240
 *         # Push into cat_scores_dict & doc_scores
 *         for j in xrange(labels.size()):
 *             label = labels[j]             # <<<<<<<<<<<<<<
 *             doc_scores.push_back(idpair(label, score))
 *             got3 = cat_scores_dict.find(label)
 */
      __pyx_v_label = (__pyx_v_labels[__pyx_v_j]);

      /* "kNN/cppext/similarity.pyx":241
 *         for j in xrange(labels.size()):
 *             label = labels[j]
 *             doc_scores.push_back(idpair(label, score))             # <<<<<<<<<<<<<<
 *             got3 = cat_scores_dict.find(label)
 *             if got3 == cat_scores_dict.end():
 */
      __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_score); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      try {
        __pyx_t_8 = __pyx_t_3kNN_6cppext_10similarity_idpair(__pyx_v_label, __pyx_t_7);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_doc_scores.push_back(__pyx_t_8);

      /* "kNN/cppext/similarity.pyx":242
 *             label = labels[j]
 *             doc_scores.push_back(idpair(label, score))
 *             got3 = cat_scores_dict.find(label)             # <<<<<<<<<<<<<<
 *             if got3 == cat_scores_dict.end():
 *                 cat_scores_dict[label] = vector[double]()
 */
      __pyx_v_got3 = __pyx_v_cat_scores_dict.find(__pyx_v_label);

      /* "kNN/cppext/similarity.pyx":243
 *             doc_scores.push_back(idpair(label, score))
 *             got3 = cat_scores_dict.find(label)
 *             if got3 == cat_scores_dict.end():             # <<<<<<<<<<<<<<
 *                 cat_scores_dict[label] = vector[double]()
 *             cat_scores_dict[label].push_back(score)
 */
      __pyx_t_1 = ((__pyx_v_got3 == __pyx_v_cat_scores_dict.end()) != 0);
      if (__pyx_t_1) {

        /* "kNN/cppext/similarity.pyx":244
 *             got3 = cat_scores_dict.find(label)
 *             if got3 == cat_scores_dict.end():
 *                 cat_scores_dict[label] = vector[double]()             # <<<<<<<<<<<<<<
 *             cat_scores_dict[label].push_back(score)
 *     # Return the k-NN (aka top-k similar examples)
 */
        try {
          __pyx_t_9 = std::vector<double>();
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_cat_scores_dict[__pyx_v_label]) = __pyx_t_9;
        goto __pyx_L20;
      }
      __pyx_L20:;

      /* "kNN/cppext/similarity.pyx":245
 *             if got3 == cat_scores_dict.end():
 *                 cat_scores_dict[label] = vector[double]()
 *             cat_scores_dict[label].push_back(score)             # <<<<<<<<<<<<<<
 *     # Return the k-NN (aka top-k similar examples)
 *     cdef int kk
 */
      __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_score); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      (__pyx_v_cat_scores_dict[__pyx_v_label]).push_back(__pyx_t_7);
    }
  }

  /* "kNN/cppext/similarity.pyx":248
 *     # Return the k-NN (aka top-k similar examples)
 *     cdef int kk
 *     if k < doc_scores.size():             # <<<<<<<<<<<<<<
 *         kk = k
 *         partial_sort(doc_scores.begin(), doc_scores.begin()+k, doc_scores.end(),
 */
  __pyx_t_1 = ((__pyx_v_k < __pyx_v_doc_scores.size()) != 0);
  if (__pyx_t_1) {

    /* "kNN/cppext/similarity.pyx":249
 *     cdef int kk
 *     if k < doc_scores.size():
 *         kk = k             # <<<<<<<<<<<<<<
 *         partial_sort(doc_scores.begin(), doc_scores.begin()+k, doc_scores.end(),
 *             comp_func)
 */
    __pyx_v_kk = __pyx_v_k;

    /* "kNN/cppext/similarity.pyx":251
 *         kk = k
 *         partial_sort(doc_scores.begin(), doc_scores.begin()+k, doc_scores.end(),
 *             comp_func)             # <<<<<<<<<<<<<<
 *     else:
 *         kk = doc_scores.size()
 */
    try {
      std::partial_sort(__pyx_v_doc_scores.begin(), (__pyx_v_doc_scores.begin() + __pyx_v_k), __pyx_v_doc_scores.end(), __pyx_f_3kNN_6cppext_10similarity_comp_func);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L21;
  }
  /*else*/ {

    /* "kNN/cppext/similarity.pyx":253
 *             comp_func)
 *     else:
 *         kk = doc_scores.size()             # <<<<<<<<<<<<<<
 *     # optimized/transformed scores & pscores
 *     cdef pairvectitr it3
 */
    __pyx_v_kk = __pyx_v_doc_scores.size();
  }
  __pyx_L21:;

  /* "kNN/cppext/similarity.pyx":264
 *     cdef vectmap pscores
 * 
 *     it3 = doc_scores.begin()             # <<<<<<<<<<<<<<
 *     for i in xrange(kk):
 *         kv = deref(it3)
 */
  __pyx_v_it3 = __pyx_v_doc_scores.begin();

  /* "kNN/cppext/similarity.pyx":265
 * 
 *     it3 = doc_scores.begin()
 *     for i in xrange(kk):             # <<<<<<<<<<<<<<
 *         kv = deref(it3)
 *         label = kv.first
 */
  __pyx_t_2 = __pyx_v_kk;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_2; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "kNN/cppext/similarity.pyx":266
 *     it3 = doc_scores.begin()
 *     for i in xrange(kk):
 *         kv = deref(it3)             # <<<<<<<<<<<<<<
 *         label = kv.first
 *         score = kv.second
 */
    __pyx_v_kv = (*__pyx_v_it3);

    /* "kNN/cppext/similarity.pyx":267
 *     for i in xrange(kk):
 *         kv = deref(it3)
 *         label = kv.first             # <<<<<<<<<<<<<<
 *         score = kv.second
 *         inc(it3)
 */
    __pyx_t_11 = __pyx_v_kv.first;
    __pyx_v_label = __pyx_t_11;

    /* "kNN/cppext/similarity.pyx":268
 *         kv = deref(it3)
 *         label = kv.first
 *         score = kv.second             # <<<<<<<<<<<<<<
 *         inc(it3)
 *         got3 = scores.find(label)
 */
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_kv.second); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF(__pyx_v_score);
    __pyx_v_score = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "kNN/cppext/similarity.pyx":269
 *         label = kv.first
 *         score = kv.second
 *         inc(it3)             # <<<<<<<<<<<<<<
 *         got3 = scores.find(label)
 *         if got3 == scores.end():
 */
    (++__pyx_v_it3);

    /* "kNN/cppext/similarity.pyx":270
 *         score = kv.second
 *         inc(it3)
 *         got3 = scores.find(label)             # <<<<<<<<<<<<<<
 *         if got3 == scores.end():
 *             scores[label] = vector[double]()
 */
    __pyx_v_got3 = __pyx_v_scores.find(__pyx_v_label);

    /* "kNN/cppext/similarity.pyx":271
 *         inc(it3)
 *         got3 = scores.find(label)
 *         if got3 == scores.end():             # <<<<<<<<<<<<<<
 *             scores[label] = vector[double]()
 *         scores[label].push_back(score)
 */
    __pyx_t_1 = ((__pyx_v_got3 == __pyx_v_scores.end()) != 0);
    if (__pyx_t_1) {

      /* "kNN/cppext/similarity.pyx":272
 *         got3 = scores.find(label)
 *         if got3 == scores.end():
 *             scores[label] = vector[double]()             # <<<<<<<<<<<<<<
 *         scores[label].push_back(score)
 *         parents_set = parents_index[label]
 */
      try {
        __pyx_t_9 = std::vector<double>();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      (__pyx_v_scores[__pyx_v_label]) = __pyx_t_9;
      goto __pyx_L24;
    }
    __pyx_L24:;

    /* "kNN/cppext/similarity.pyx":273
 *         if got3 == scores.end():
 *             scores[label] = vector[double]()
 *         scores[label].push_back(score)             # <<<<<<<<<<<<<<
 *         parents_set = parents_index[label]
 *         it4 = parents_set.begin()
 */
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_score); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_scores[__pyx_v_label]).push_back(__pyx_t_7);

    /* "kNN/cppext/similarity.pyx":274
 *             scores[label] = vector[double]()
 *         scores[label].push_back(score)
 *         parents_set = parents_index[label]             # <<<<<<<<<<<<<<
 *         it4 = parents_set.begin()
 *         while it4 != parents_set.end():
 */
    __pyx_v_parents_set = (__pyx_v_parents_index[__pyx_v_label]);

    /* "kNN/cppext/similarity.pyx":275
 *         scores[label].push_back(score)
 *         parents_set = parents_index[label]
 *         it4 = parents_set.begin()             # <<<<<<<<<<<<<<
 *         while it4 != parents_set.end():
 *             parent = deref(it4)
 */
    __pyx_v_it4 = __pyx_v_parents_set.begin();

    /* "kNN/cppext/similarity.pyx":276
 *         parents_set = parents_index[label]
 *         it4 = parents_set.begin()
 *         while it4 != parents_set.end():             # <<<<<<<<<<<<<<
 *             parent = deref(it4)
 *             inc(it4)
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_it4 != __pyx_v_parents_set.end()) != 0);
      if (!__pyx_t_1) break;

      /* "kNN/cppext/similarity.pyx":277
 *         it4 = parents_set.begin()
 *         while it4 != parents_set.end():
 *             parent = deref(it4)             # <<<<<<<<<<<<<<
 *             inc(it4)
 *             children_set = children_index[parent]
 */
      __pyx_v_parent = (*__pyx_v_it4);

      /* "kNN/cppext/similarity.pyx":278
 *         while it4 != parents_set.end():
 *             parent = deref(it4)
 *             inc(it4)             # <<<<<<<<<<<<<<
 *             children_set = children_index[parent]
 *             got3 = pscores.find(label)
 */
      (++__pyx_v_it4);

      /* "kNN/cppext/similarity.pyx":279
 *             parent = deref(it4)
 *             inc(it4)
 *             children_set = children_index[parent]             # <<<<<<<<<<<<<<
 *             got3 = pscores.find(label)
 *             if got3 == pscores.end():
 */
      __pyx_v_children_set = (__pyx_v_children_index[__pyx_v_parent]);

      /* "kNN/cppext/similarity.pyx":280
 *             inc(it4)
 *             children_set = children_index[parent]
 *             got3 = pscores.find(label)             # <<<<<<<<<<<<<<
 *             if got3 == pscores.end():
 *                 pscores[label] = vector[double]()
 */
      __pyx_v_got3 = __pyx_v_pscores.find(__pyx_v_label);

      /* "kNN/cppext/similarity.pyx":281
 *             children_set = children_index[parent]
 *             got3 = pscores.find(label)
 *             if got3 == pscores.end():             # <<<<<<<<<<<<<<
 *                 pscores[label] = vector[double]()
 *             pscores[label].push_back(children_set.size())
 */
      __pyx_t_1 = ((__pyx_v_got3 == __pyx_v_pscores.end()) != 0);
      if (__pyx_t_1) {

        /* "kNN/cppext/similarity.pyx":282
 *             got3 = pscores.find(label)
 *             if got3 == pscores.end():
 *                 pscores[label] = vector[double]()             # <<<<<<<<<<<<<<
 *             pscores[label].push_back(children_set.size())
 *     # return pair[vectmap, vectmap](scores, pscores)
 */
        try {
          __pyx_t_9 = std::vector<double>();
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        (__pyx_v_pscores[__pyx_v_label]) = __pyx_t_9;
        goto __pyx_L27;
      }
      __pyx_L27:;

      /* "kNN/cppext/similarity.pyx":283
 *             if got3 == pscores.end():
 *                 pscores[label] = vector[double]()
 *             pscores[label].push_back(children_set.size())             # <<<<<<<<<<<<<<
 *     # return pair[vectmap, vectmap](scores, pscores)
 * 
 */
      (__pyx_v_pscores[__pyx_v_label]).push_back(__pyx_v_children_set.size());
    }
  }

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("kNN.cppext.similarity.cossim2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bottom);
  __Pyx_XDECREF(__pyx_v_score);
  __Pyx_RefNannyFinishContext();
}

/* "kNN/cppext/similarity.pyx":290
 *     dvectitr max_element(dvectitr&, dvectitr&) nogil except +
 * 
 * cdef double custom_max(iddict& lut):             # <<<<<<<<<<<<<<
 *     ''' personal func that returns the max value inside an
 *         unordered_map[int,double] '''
 */

static double __pyx_f_3kNN_6cppext_10similarity_custom_max(__pyx_t_3kNN_6cppext_10similarity_iddict &__pyx_v_lut) {
  __pyx_t_3kNN_6cppext_10similarity_iddictitr __pyx_v_it;
  double __pyx_v_ansatz;
  double __pyx_v_val;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("custom_max", 0);

  /* "kNN/cppext/similarity.pyx":293
 *     ''' personal func that returns the max value inside an
 *         unordered_map[int,double] '''
 *     cdef iddictitr it = lut.begin()             # <<<<<<<<<<<<<<
 *     cdef double ansatz = deref(it).second
 *     cdef double val
 */
  __pyx_v_it = __pyx_v_lut.begin();

  /* "kNN/cppext/similarity.pyx":294
 *         unordered_map[int,double] '''
 *     cdef iddictitr it = lut.begin()
 *     cdef double ansatz = deref(it).second             # <<<<<<<<<<<<<<
 *     cdef double val
 *     while it != lut.end():
 */
  __pyx_t_1 = (*__pyx_v_it).second;
  __pyx_v_ansatz = __pyx_t_1;

  /* "kNN/cppext/similarity.pyx":296
 *     cdef double ansatz = deref(it).second
 *     cdef double val
 *     while it != lut.end():             # <<<<<<<<<<<<<<
 *         val = deref(it).second
 *         inc(it)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_it != __pyx_v_lut.end()) != 0);
    if (!__pyx_t_2) break;

    /* "kNN/cppext/similarity.pyx":297
 *     cdef double val
 *     while it != lut.end():
 *         val = deref(it).second             # <<<<<<<<<<<<<<
 *         inc(it)
 *         if val > ansatz:
 */
    __pyx_t_1 = (*__pyx_v_it).second;
    __pyx_v_val = __pyx_t_1;

    /* "kNN/cppext/similarity.pyx":298
 *     while it != lut.end():
 *         val = deref(it).second
 *         inc(it)             # <<<<<<<<<<<<<<
 *         if val > ansatz:
 *             ansatz = val
 */
    (++__pyx_v_it);

    /* "kNN/cppext/similarity.pyx":299
 *         val = deref(it).second
 *         inc(it)
 *         if val > ansatz:             # <<<<<<<<<<<<<<
 *             ansatz = val
 *     return ansatz
 */
    __pyx_t_2 = ((__pyx_v_val > __pyx_v_ansatz) != 0);
    if (__pyx_t_2) {

      /* "kNN/cppext/similarity.pyx":300
 *         inc(it)
 *         if val > ansatz:
 *             ansatz = val             # <<<<<<<<<<<<<<
 *     return ansatz
 * 
 */
      __pyx_v_ansatz = __pyx_v_val;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }

  /* "kNN/cppext/similarity.pyx":301
 *         if val > ansatz:
 *             ansatz = val
 *     return ansatz             # <<<<<<<<<<<<<<
 * 
 * #num = cython.fused_type(cython.int, cython.float, cython.double)
 */
  __pyx_r = __pyx_v_ansatz;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "kNN/cppext/similarity.pyx":304
 * 
 * #num = cython.fused_type(cython.int, cython.float, cython.double)
 * cdef double csum(vector[double]& vect):             # <<<<<<<<<<<<<<
 *     cdef double ansatz = 0
 *     cdef vector[double].iterator it = vect.begin()
 */

static double __pyx_f_3kNN_6cppext_10similarity_csum(std::vector<double> &__pyx_v_vect) {
  double __pyx_v_ansatz;
  std::vector<double>::iterator __pyx_v_it;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("csum", 0);

  /* "kNN/cppext/similarity.pyx":305
 * #num = cython.fused_type(cython.int, cython.float, cython.double)
 * cdef double csum(vector[double]& vect):
 *     cdef double ansatz = 0             # <<<<<<<<<<<<<<
 *     cdef vector[double].iterator it = vect.begin()
 *     while it != vect.end():
 */
  __pyx_v_ansatz = 0.0;

  /* "kNN/cppext/similarity.pyx":306
 * cdef double csum(vector[double]& vect):
 *     cdef double ansatz = 0
 *     cdef vector[double].iterator it = vect.begin()             # <<<<<<<<<<<<<<
 *     while it != vect.end():
 *         ansatz += deref(it)
 */
  __pyx_v_it = __pyx_v_vect.begin();

  /* "kNN/cppext/similarity.pyx":307
 *     cdef double ansatz = 0
 *     cdef vector[double].iterator it = vect.begin()
 *     while it != vect.end():             # <<<<<<<<<<<<<<
 *         ansatz += deref(it)
 *         inc(it)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_vect.end()) != 0);
    if (!__pyx_t_1) break;

    /* "kNN/cppext/similarity.pyx":308
 *     cdef vector[double].iterator it = vect.begin()
 *     while it != vect.end():
 *         ansatz += deref(it)             # <<<<<<<<<<<<<<
 *         inc(it)
 *     return ansatz
 */
    __pyx_v_ansatz = (__pyx_v_ansatz + (*__pyx_v_it));

    /* "kNN/cppext/similarity.pyx":309
 *     while it != vect.end():
 *         ansatz += deref(it)
 *         inc(it)             # <<<<<<<<<<<<<<
 *     return ansatz
 * 
 */
    (++__pyx_v_it);
  }

  /* "kNN/cppext/similarity.pyx":310
 *         ansatz += deref(it)
 *         inc(it)
 *     return ansatz             # <<<<<<<<<<<<<<
 * 
 * cdef iddict optimized_ranks(vectmap& scores, vectmap& pscores, iidict& label_counter,
 */
  __pyx_r = __pyx_v_ansatz;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "kNN/cppext/similarity.pyx":312
 *     return ansatz
 * 
 * cdef iddict optimized_ranks(vectmap& scores, vectmap& pscores, iidict& label_counter,             # <<<<<<<<<<<<<<
 *         double w1, double w2, double w3, double w4):
 *     ''' w1..w4 are weights corresponding to x1..x4 '''
 */

static __pyx_t_3kNN_6cppext_10similarity_iddict __pyx_f_3kNN_6cppext_10similarity_optimized_ranks(__pyx_t_3kNN_6cppext_10similarity_vectmap &__pyx_v_scores, __pyx_t_3kNN_6cppext_10similarity_vectmap &__pyx_v_pscores, __pyx_t_3kNN_6cppext_10similarity_iidict &__pyx_v_label_counter, double __pyx_v_w1, double __pyx_v_w2, double __pyx_v_w3, double __pyx_v_w4) {
  int __pyx_v_c;
  __pyx_t_3kNN_6cppext_10similarity_vectmapitr __pyx_v_it;
  std::pair<int,std::vector<double> > __pyx_v_kv;
  std::vector<double> __pyx_v_inner_scores;
  std::vector<double> __pyx_v_inner_pscores;
  double __pyx_v_x1;
  double __pyx_v_x2;
  double __pyx_v_x3;
  double __pyx_v_x4;
  __pyx_t_3kNN_6cppext_10similarity_iddict __pyx_v_ranks_dict;
  __pyx_t_3kNN_6cppext_10similarity_iddict __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::vector<double> __pyx_t_3;
  __pyx_t_3kNN_6cppext_10similarity_dvectitr __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("optimized_ranks", 0);

  /* "kNN/cppext/similarity.pyx":336
 *     cdef double x1, x2, x3, x4
 *     cdef iddict ranks_dict
 *     it = scores.begin()             # <<<<<<<<<<<<<<
 *     while it != scores.end():
 *         kv = deref(it)
 */
  __pyx_v_it = __pyx_v_scores.begin();

  /* "kNN/cppext/similarity.pyx":337
 *     cdef iddict ranks_dict
 *     it = scores.begin()
 *     while it != scores.end():             # <<<<<<<<<<<<<<
 *         kv = deref(it)
 *         inc(it)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_scores.end()) != 0);
    if (!__pyx_t_1) break;

    /* "kNN/cppext/similarity.pyx":338
 *     it = scores.begin()
 *     while it != scores.end():
 *         kv = deref(it)             # <<<<<<<<<<<<<<
 *         inc(it)
 *         c = kv.first
 */
    __pyx_v_kv = (*__pyx_v_it);

    /* "kNN/cppext/similarity.pyx":339
 *     while it != scores.end():
 *         kv = deref(it)
 *         inc(it)             # <<<<<<<<<<<<<<
 *         c = kv.first
 *         inner_scores = kv.second
 */
    (++__pyx_v_it);

    /* "kNN/cppext/similarity.pyx":340
 *         kv = deref(it)
 *         inc(it)
 *         c = kv.first             # <<<<<<<<<<<<<<
 *         inner_scores = kv.second
 *         inner_pscores = pscores[c]
 */
    __pyx_t_2 = __pyx_v_kv.first;
    __pyx_v_c = __pyx_t_2;

    /* "kNN/cppext/similarity.pyx":341
 *         inc(it)
 *         c = kv.first
 *         inner_scores = kv.second             # <<<<<<<<<<<<<<
 *         inner_pscores = pscores[c]
 *         x1 = deref(max_element(inner_scores.begin(), inner_scores.end()))
 */
    __pyx_t_3 = __pyx_v_kv.second;
    __pyx_v_inner_scores = __pyx_t_3;

    /* "kNN/cppext/similarity.pyx":342
 *         c = kv.first
 *         inner_scores = kv.second
 *         inner_pscores = pscores[c]             # <<<<<<<<<<<<<<
 *         x1 = deref(max_element(inner_scores.begin(), inner_scores.end()))
 *         x2 = csum(inner_pscores)
 */
    __pyx_v_inner_pscores = (__pyx_v_pscores[__pyx_v_c]);

    /* "kNN/cppext/similarity.pyx":343
 *         inner_scores = kv.second
 *         inner_pscores = pscores[c]
 *         x1 = deref(max_element(inner_scores.begin(), inner_scores.end()))             # <<<<<<<<<<<<<<
 *         x2 = csum(inner_pscores)
 *         x3 = csum(inner_scores)
 */
    try {
      __pyx_t_4 = std::max_element(__pyx_v_inner_scores.begin(), __pyx_v_inner_scores.end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_x1 = (*__pyx_t_4);

    /* "kNN/cppext/similarity.pyx":344
 *         inner_pscores = pscores[c]
 *         x1 = deref(max_element(inner_scores.begin(), inner_scores.end()))
 *         x2 = csum(inner_pscores)             # <<<<<<<<<<<<<<
 *         x3 = csum(inner_scores)
 *         x4 = (<double>inner_scores.size())/(<double>label_counter[c])
 */
    __pyx_v_x2 = __pyx_f_3kNN_6cppext_10similarity_csum(__pyx_v_inner_pscores);

    /* "kNN/cppext/similarity.pyx":345
 *         x1 = deref(max_element(inner_scores.begin(), inner_scores.end()))
 *         x2 = csum(inner_pscores)
 *         x3 = csum(inner_scores)             # <<<<<<<<<<<<<<
 *         x4 = (<double>inner_scores.size())/(<double>label_counter[c])
 *         ranks_dict[c] = w1*x1 + w2*x2 + w3*x3 + w4*x4
 */
    __pyx_v_x3 = __pyx_f_3kNN_6cppext_10similarity_csum(__pyx_v_inner_scores);

    /* "kNN/cppext/similarity.pyx":346
 *         x2 = csum(inner_pscores)
 *         x3 = csum(inner_scores)
 *         x4 = (<double>inner_scores.size())/(<double>label_counter[c])             # <<<<<<<<<<<<<<
 *         ranks_dict[c] = w1*x1 + w2*x2 + w3*x3 + w4*x4
 *     return ranks_dict
 */
    __pyx_t_5 = ((double)__pyx_v_inner_scores.size());
    __pyx_t_6 = ((double)(__pyx_v_label_counter[__pyx_v_c]));
    if (unlikely(__pyx_t_6 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_Format(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_x4 = (__pyx_t_5 / __pyx_t_6);

    /* "kNN/cppext/similarity.pyx":347
 *         x3 = csum(inner_scores)
 *         x4 = (<double>inner_scores.size())/(<double>label_counter[c])
 *         ranks_dict[c] = w1*x1 + w2*x2 + w3*x3 + w4*x4             # <<<<<<<<<<<<<<
 *     return ranks_dict
 * 
 */
    (__pyx_v_ranks_dict[__pyx_v_c]) = ((((__pyx_v_w1 * __pyx_v_x1) + (__pyx_v_w2 * __pyx_v_x2)) + (__pyx_v_w3 * __pyx_v_x3)) + (__pyx_v_w4 * __pyx_v_x4));
  }

  /* "kNN/cppext/similarity.pyx":348
 *         x4 = (<double>inner_scores.size())/(<double>label_counter[c])
 *         ranks_dict[c] = w1*x1 + w2*x2 + w3*x3 + w4*x4
 *     return ranks_dict             # <<<<<<<<<<<<<<
 * 
 * cdef vector[int] predict(iddict& ranks, double alpha):
 */
  __pyx_r = __pyx_v_ranks_dict;
  goto __pyx_L0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("kNN.cppext.similarity.optimized_ranks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "kNN/cppext/similarity.pyx":350
 *     return ranks_dict
 * 
 * cdef vector[int] predict(iddict& ranks, double alpha):             # <<<<<<<<<<<<<<
 *     ''' Return a list of labels if their corresponding ranks are higher
 *         than a threshold provided by `alpha`.
 */

static std::vector<int> __pyx_f_3kNN_6cppext_10similarity_predict(__pyx_t_3kNN_6cppext_10similarity_iddict &__pyx_v_ranks, double __pyx_v_alpha) {
  std::vector<int> __pyx_v_ans;
  double __pyx_v_max_rank;
  __pyx_t_3kNN_6cppext_10similarity_iddictitr __pyx_v_it;
  __pyx_t_3kNN_6cppext_10similarity_idpair __pyx_v_kv;
  std::vector<int> __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("predict", 0);

  /* "kNN/cppext/similarity.pyx":360
 *     # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 *     cdef vector[int] ans
 *     cdef double max_rank = custom_max(ranks)             # <<<<<<<<<<<<<<
 *     cdef iddictitr it = ranks.begin()
 *     cdef idpair kv
 */
  __pyx_v_max_rank = __pyx_f_3kNN_6cppext_10similarity_custom_max(__pyx_v_ranks);

  /* "kNN/cppext/similarity.pyx":361
 *     cdef vector[int] ans
 *     cdef double max_rank = custom_max(ranks)
 *     cdef iddictitr it = ranks.begin()             # <<<<<<<<<<<<<<
 *     cdef idpair kv
 *     while it != ranks.end():
 */
  __pyx_v_it = __pyx_v_ranks.begin();

  /* "kNN/cppext/similarity.pyx":363
 *     cdef iddictitr it = ranks.begin()
 *     cdef idpair kv
 *     while it != ranks.end():             # <<<<<<<<<<<<<<
 *         kv = deref(it)
 *         inc(it)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_ranks.end()) != 0);
    if (!__pyx_t_1) break;

    /* "kNN/cppext/similarity.pyx":364
 *     cdef idpair kv
 *     while it != ranks.end():
 *         kv = deref(it)             # <<<<<<<<<<<<<<
 *         inc(it)
 *         if kv.second / max_rank > alpha:
 */
    __pyx_v_kv = (*__pyx_v_it);

    /* "kNN/cppext/similarity.pyx":365
 *     while it != ranks.end():
 *         kv = deref(it)
 *         inc(it)             # <<<<<<<<<<<<<<
 *         if kv.second / max_rank > alpha:
 *             ans.push_back(kv.first)
 */
    (++__pyx_v_it);

    /* "kNN/cppext/similarity.pyx":366
 *         kv = deref(it)
 *         inc(it)
 *         if kv.second / max_rank > alpha:             # <<<<<<<<<<<<<<
 *             ans.push_back(kv.first)
 *     return ans
 */
    if (unlikely(__pyx_v_max_rank == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_Format(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = (((__pyx_v_kv.second / __pyx_v_max_rank) > __pyx_v_alpha) != 0);
    if (__pyx_t_1) {

      /* "kNN/cppext/similarity.pyx":367
 *         inc(it)
 *         if kv.second / max_rank > alpha:
 *             ans.push_back(kv.first)             # <<<<<<<<<<<<<<
 *     return ans
 */
      __pyx_v_ans.push_back(__pyx_v_kv.first);
      goto __pyx_L5;
    }
    __pyx_L5:;
  }

  /* "kNN/cppext/similarity.pyx":368
 *         if kv.second / max_rank > alpha:
 *             ans.push_back(kv.first)
 *     return ans             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_v_ans;
  goto __pyx_L0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("kNN.cppext.similarity.predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("similarity"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__xrange, __pyx_k__xrange, sizeof(__pyx_k__xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s__range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s__xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initsimilarity(void); /*proto*/
PyMODINIT_FUNC initsimilarity(void)
#else
PyMODINIT_FUNC PyInit_similarity(void); /*proto*/
PyMODINIT_FUNC PyInit_similarity(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_similarity(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("similarity"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "kNN.cppext.similarity")) {
      if (unlikely(PyDict_SetItemString(modules, "kNN.cppext.similarity", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_kNN__cppext__similarity) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("transform_tfidf", (void (*)(void))__pyx_f_3kNN_6cppext_10similarity_transform_tfidf, "void (std::vector<std::tr1::unordered_map<int,double> > &, std::tr1::unordered_map<int,int> &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("cossim", (void (*)(void))__pyx_f_3kNN_6cppext_10similarity_cossim, "std::pair<std::tr1::unordered_map<int,std::vector<double> >,std::tr1::unordered_map<int,std::vector<double> > > (std::tr1::unordered_map<int,double> &, std::vector<std::tr1::unordered_map<int,double> > &, int, std::vector<std::vector<int> > &, std::tr1::unordered_map<int,std::tr1::unordered_set<int> > &, std::tr1::unordered_map<int,std::tr1::unordered_set<int> > &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("cossim2", (void (*)(void))__pyx_f_3kNN_6cppext_10similarity_cossim2, "void (std::tr1::unordered_map<int,double> &, std::vector<std::tr1::unordered_map<int,double> > &, int, std::vector<std::vector<int> > &, std::tr1::unordered_map<int,std::tr1::unordered_set<int> > &, std::tr1::unordered_map<int,std::tr1::unordered_set<int> > &, std::tr1::unordered_map<int,std::tr1::unordered_set<int> > &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("optimized_ranks", (void (*)(void))__pyx_f_3kNN_6cppext_10similarity_optimized_ranks, "std::tr1::unordered_map<int,double> (std::tr1::unordered_map<int,std::vector<double> > &, std::tr1::unordered_map<int,std::vector<double> > &, std::tr1::unordered_map<int,int> &, double, double, double, double)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("predict", (void (*)(void))__pyx_f_3kNN_6cppext_10similarity_predict, "std::vector<int> (std::tr1::unordered_map<int,double> &, double)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "kNN/cppext/similarity.pyx":1
 * #distutils: language = c++             # <<<<<<<<<<<<<<
 * #cython: boundscheck=False
 * #cython: wraparound=False
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_d, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init kNN.cppext.similarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init kNN.cppext.similarity");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (r < 0) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       if ((val != (unsigned PY_LONG_LONG)-1) || !PyErr_Occurred())
           PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
